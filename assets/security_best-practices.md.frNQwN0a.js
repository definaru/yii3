import{_ as e,c as s,o as i,V as a}from"./chunks/framework.szqEfhRr.js";const g=JSON.parse('{"title":"Security best practices","description":"","frontmatter":{},"headers":[],"relativePath":"security/best-practices.md","filePath":"security/best-practices.md","lastUpdated":null}'),t={name:"security/best-practices.md"},n=a(`<h1 id="security-best-practices" tabindex="-1">Security best practices <a class="header-anchor" href="#security-best-practices" aria-label="Permalink to &quot;Security best practices&quot;">​</a></h1><p>Below, we&#39;ll review common security principles and describe how to avoid threats when developing applications using Yii. Most of these principles aren&#39;t unique to Yii alone but apply to website or software development in general, so you will also find links for further reading on the general ideas behind these.</p><h2 id="basic-principles" tabindex="-1">Basic principles <a class="header-anchor" href="#basic-principles" aria-label="Permalink to &quot;Basic principles&quot;">​</a></h2><p>There are two main principles when it comes to security no matter which application is being developed:</p><ol><li>Filter input.</li><li>Escape output.</li></ol><h3 id="filter-input" tabindex="-1">Filter input <a class="header-anchor" href="#filter-input" aria-label="Permalink to &quot;Filter input&quot;">​</a></h3><p>Filter input means that you should never consider input safe, and you should always check if the value you&#39;ve got is actually among allowed ones. For example, if you know that you sort by three fields <code>title</code>, <code>created_at</code> and <code>status</code> and the field came from user input, it&#39;s better to check the value you&#39;ve got right where you&#39;re receiving it. In terms of basic PHP, that would look like the following:</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$sortBy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $_GET[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sort&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">in_array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($sortBy, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;title&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;created_at&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;status&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\InvalidArgumentException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Invalid sort value.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>In Yii, most probably you&#39;ll use <a href="./../input/validation.html">form validation</a> to do alike checks.</p><p>Further reading on the topic:</p><ul><li><a href="https://owasp.org/www-community/vulnerabilities/Improper_Data_Validation" target="_blank" rel="noreferrer">https://owasp.org/www-community/vulnerabilities/Improper_Data_Validation</a></li><li><a href="https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html" target="_blank" rel="noreferrer">https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html</a></li></ul><h3 id="escape-output" tabindex="-1">Escape output <a class="header-anchor" href="#escape-output" aria-label="Permalink to &quot;Escape output&quot;">​</a></h3><p>Escape output means that, depending on the context where you&#39;re using data, you should prepend it with special characters to negate its special meaning. In context of HTML you should escape <code>&lt;</code>, <code>&gt;</code> and alike special characters. In the context of JavaScript or SQL, it will be a different set of characters. Since it&#39;s error-prone to escape manually, Yii provides various tools to perform escaping for different contexts.</p><p>Further reading on the topic:</p><ul><li><a href="https://owasp.org/www-community/attacks/Command_Injection" target="_blank" rel="noreferrer">https://owasp.org/www-community/attacks/Command_Injection</a></li><li><a href="https://owasp.org/www-community/attacks/Code_Injection" target="_blank" rel="noreferrer">https://owasp.org/www-community/attacks/Code_Injection</a></li><li><a href="https://owasp.org/www-community/attacks/xss/" target="_blank" rel="noreferrer">https://owasp.org/www-community/attacks/xss/</a></li></ul><h2 id="avoiding-sql-injections" tabindex="-1">Avoiding SQL injections <a class="header-anchor" href="#avoiding-sql-injections" aria-label="Permalink to &quot;Avoiding SQL injections&quot;">​</a></h2><p>SQL injection happens when you form a query text by concatenating unescaped strings such as the following:</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $_GET[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;username&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$sql </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$username</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Instead of supplying correct username attacker could give your applications something like <code>&#39;; DROP TABLE user; --</code>. The Resulting SQL will be the following:</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DROP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>This is a valid query that will search for users with empty username and then will drop <code>user</code> table most probably resulting in a broken website and data loss (you&#39;ve set up regular backups, right?).</p><p>Make sure to either use PDO prepared statements directly or ensure that the library you prefer is doing it. In case of prepared statements, it&#39;s impossible to manipulate the query as was demonstrated above.</p><p>If you use data to specify column names or table names, the best thing to do is to allow only a predefined set of values:</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> actionList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($orderBy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">in_array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($orderBy, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;status&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\InvalidArgumentException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Only name and status are allowed to order by.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Further reading on the topic:</p><ul><li><a href="https://owasp.org/www-community/attacks/SQL_Injection" target="_blank" rel="noreferrer">https://owasp.org/www-community/attacks/SQL_Injection</a></li></ul><h2 id="avoiding-xss" tabindex="-1">Avoiding XSS <a class="header-anchor" href="#avoiding-xss" aria-label="Permalink to &quot;Avoiding XSS&quot;">​</a></h2><p>XSS or cross-site scripting happens when output isn&#39;t escaped properly when outputting HTML to the browser. For example, if user can enter his name and instead of <code>Alexander</code> he enters <code>&lt;script&gt;alert(&#39;Hello!&#39;);&lt;/script&gt;</code>, every page that outputs username without escaping it will execute JavaScript <code>alert(&#39;Hello!&#39;);</code> resulting in alert box popping up in a browser. Depending on website instead of innocent alert, such a script could send messages using your name or even perform bank transactions.</p><p>Avoiding XSS is quite easy in Yii. There are two cases:</p><ol><li>You want to output data as plain text.</li><li>You want to output data as HTML.</li></ol><p>If all you need is plain text, then escaping is as easy as following:</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;?=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\Yiisoft\\Html\\Html</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($username) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>If it should be HTML you could get some help from <a href="http://htmlpurifier.org/" target="_blank" rel="noreferrer">HtmlPurifier</a>. Note that HtmlPurifier processing is quite heavy, so consider adding caching.</p><p>Further reading on the topic:</p><ul><li><a href="https://owasp.org/www-community/attacks/xss/" target="_blank" rel="noreferrer">https://owasp.org/www-community/attacks/xss/</a></li></ul><h2 id="avoiding-csrf" tabindex="-1">Avoiding CSRF <a class="header-anchor" href="#avoiding-csrf" aria-label="Permalink to &quot;Avoiding CSRF&quot;">​</a></h2><p>CSRF is an abbreviation for cross-site request forgery. The idea is that many applications assume that requests coming from a user browser are made by the user themselves. This assumption could be false.</p><p>For example, the website <code>an.example.com</code> has a <code>/logout</code> URL that, when accessed using a simple GET request, logs the user out. As long as it&#39;s requested by the user themselves everything is OK, but one day bad guys are somehow posting <code>&lt;img src=&quot;http://an.example.com/logout&quot;&gt;</code> on a forum the user often visits. The browser doesn&#39;t make any difference between requesting an image or requesting a page so when the user opens a page with such a manipulated <code>&lt;img&gt;</code> tag, the browser will send the GET request to that URL and the user will be logged out from <code>an.example.com</code>.</p><p>That&#39;s the basic idea of how a CSRF attack works. One can say that logging out a user isn&#39;t a serious thing. However, this was just an example. There are much more things one could do using this approach. For example, triggering payments or changing data. Imagine that some website has a URL <code>http://an.example.com/purse/transfer?to=anotherUser&amp;amount=2000</code>. Accessing it using GET request, causes transfer of $2000 from an authorized user account to user <code>anotherUser</code>. You know that the browser will always send GET request to load an image, so you can change the code to accept only POST requests on that URL. Unfortunately, this won&#39;t save you, because an attacker can put some JavaScript code instead of <code>&lt;img&gt;</code> tag, which allows to send POST requests to that URL as well.</p><p>For this reason, Yii applies extra mechanisms to protect against CSRF attacks.</p><p>To avoid CSRF, you should always:</p><ol><li>Follow HTTP specification. GET shouldn&#39;t change the application state. See <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html" target="_blank" rel="noreferrer">RFC2616</a> for more details.</li><li>Keep Yii CSRF protection enabled.</li></ol><p>Yii has CSRF protection as <code>Yiisoft\\Yii\\Web\\Middleware\\Csrf</code> middleware. Make sure it&#39;s in your application middleware stack.</p><p>Further reading on the topic:</p><ul><li><a href="https://owasp.org/www-community/attacks/csrf" target="_blank" rel="noreferrer">https://owasp.org/www-community/attacks/csrf</a></li><li><a href="https://owasp.org/www-community/SameSite" target="_blank" rel="noreferrer">https://owasp.org/www-community/SameSite</a></li></ul><h2 id="avoiding-file-exposure" tabindex="-1">Avoiding file exposure <a class="header-anchor" href="#avoiding-file-exposure" aria-label="Permalink to &quot;Avoiding file exposure&quot;">​</a></h2><p>By default, server webroot is meant to be pointed to <code>public</code> directory where <code>index.php</code> is. In case of shared hosting environments it could be impossible to achieve, so you&#39;ll end up with all the code, configs and logs in server webroot.</p><p>If so, don&#39;t forget to deny access to everything except <code>web</code>. If it&#39;s impossible, consider hosting your application elsewhere.</p><h2 id="avoiding-debug-info-and-tools-in-production" tabindex="-1">Avoiding debug info and tools in production <a class="header-anchor" href="#avoiding-debug-info-and-tools-in-production" aria-label="Permalink to &quot;Avoiding debug info and tools in production&quot;">​</a></h2><p>In debug mode, Yii shows quite verbose errors which are certainly helpful for development. The thing is that these verbose errors are handy for attacker as well since these could reveal database structure, configuration values and parts of your code.</p><p>Never run production applications with debugger or Gii accessible to everyone. One could use it to get information about database structure, code and to simply rewrite code with what&#39;s generated by Gii.</p><p>You should avoid the debug toolbar at production unless necessary. It exposes all the application and config details possible. If you absolutely need it, check twice you restrict access to your IP only.</p><p>Further reading on the topic:</p><ul><li><a href="https://owasp.org/www-project-.net/articles/Exception_Handling.md" target="_blank" rel="noreferrer">https://owasp.org/www-project-.net/articles/Exception_Handling.md</a></li><li><a href="https://owasp.org/www-pdf-archive/OWASP_Top_10_2007.pdf" target="_blank" rel="noreferrer">https://owasp.org/www-pdf-archive/OWASP_Top_10_2007.pdf</a></li></ul><h2 id="using-secure-connection-over-tls" tabindex="-1">Using secure connection over TLS <a class="header-anchor" href="#using-secure-connection-over-tls" aria-label="Permalink to &quot;Using secure connection over TLS&quot;">​</a></h2><p>Yii provides features that rely on cookies and/or PHP sessions. These can be vulnerable in case your connection is compromised. The risk is reduced if the app uses secure connection via TLS (often referred to as <a href="https://en.wikipedia.org/wiki/Transport_Layer_Security" target="_blank" rel="noreferrer">SSL</a>).</p><p>Nowadays, anyone can get a certificate for free and automatically update it thanks to <a href="https://letsencrypt.org/" target="_blank" rel="noreferrer">Let&#39;s Encrypt</a>.</p><h2 id="secure-server-configuration" tabindex="-1">Secure server configuration <a class="header-anchor" href="#secure-server-configuration" aria-label="Permalink to &quot;Secure server configuration&quot;">​</a></h2><p>The purpose of this section is to highlight risks that need to be considered when creating a server configuration for serving a Yii based website. Besides the points covered here there may be other security related configuration options to be considered, so don&#39;t consider this section to be complete.</p><h3 id="avoiding-host-header-attacks" tabindex="-1">Avoiding <code>Host</code>-header attacks <a class="header-anchor" href="#avoiding-host-header-attacks" aria-label="Permalink to &quot;Avoiding \`Host\`-header attacks&quot;">​</a></h3><p>If the webserver is configured to serve the same site independent of the value of the <code>Host</code> header, this information mayn&#39;t be reliable and <a href="https://www.acunetix.com/vulnerabilities/web/host-header-attack" target="_blank" rel="noreferrer">may be faked by the user sending the HTTP request</a>. In such situations, you should fix your webserver configuration to serve the site only for specified host names.</p><p>For more information about the server configuration, please refer to the documentation of your webserver:</p><ul><li>Apache 2: <a href="https://httpd.apache.org/docs/trunk/vhosts/examples.html#defaultallports" target="_blank" rel="noreferrer">https://httpd.apache.org/docs/trunk/vhosts/examples.html#defaultallports</a></li><li>Nginx: <a href="https://www.nginx.com/resources/wiki/start/topics/examples/server_blocks/" target="_blank" rel="noreferrer">https://www.nginx.com/resources/wiki/start/topics/examples/server_blocks/</a></li></ul><h3 id="configuring-ssl-peer-validation" tabindex="-1">Configuring SSL peer validation <a class="header-anchor" href="#configuring-ssl-peer-validation" aria-label="Permalink to &quot;Configuring SSL peer validation&quot;">​</a></h3><p>There is a typical misconception about how to solve SSL certificate validation issues such as:</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cURL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> error </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">: SSL certificate problem: unable to get local issuer certificate</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>or</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stream_socket_enable_crypto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): SSL operation failed with code 1. OpenSSL Error messages: error:1416F086:SSL routines:tls_process_server_certificate:certificate verify failed</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Many sources wrongly suggest disabling SSL peer verification. That shouldn&#39;t be ever done since it enables man-in-the middle type of attacks. Instead, PHP should be configured properly:</p><ol><li>Download <a href="https://curl.haxx.se/ca/cacert.pem" target="_blank" rel="noreferrer">https://curl.haxx.se/ca/cacert.pem</a>.</li><li>Add the following to your php.ini:</li></ol><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl.cafile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;/path/to/cacert.pem&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl.cainfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;/path/to/cacert.pem&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Note that you should keep the file up to date.</p><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h2><ul><li><a href="https://owasp.org/Top10/" target="_blank" rel="noreferrer">OWASP top 10</a></li><li><a href="https://martinfowler.com/articles/web-security-basics.html" target="_blank" rel="noreferrer">The Basics of Web Application Security</a> by Martin Fowler</li><li><a href="https://www.php.net/manual/en/security.php" target="_blank" rel="noreferrer">PHP manual: security</a></li><li><a href="https://security.stackexchange.com/" target="_blank" rel="noreferrer">Information security at STackExchange</a></li></ul>`,74),r=[n];function o(l,p,h,c,d,u){return i(),s("div",null,r)}const m=e(t,[["render",o]]);export{g as __pageData,m as default};
