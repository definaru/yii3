import{_ as e,c as a,o as s,V as i}from"./chunks/framework.szqEfhRr.js";const g=JSON.parse('{"title":"Packages","description":"","frontmatter":{},"headers":[],"relativePath":"compares/packages.md","filePath":"compares/packages.md","lastUpdated":null}'),o={name:"compares/packages.md"},n=i(`<h1 id="packages" tabindex="-1">Packages <a class="header-anchor" href="#packages" aria-label="Permalink to &quot;Packages&quot;">​</a></h1><p>Yii3 team divided the framework into several packages that conform to the following agreements.</p><p>For all packages, the GitHub repository name exactly matches the Packagist package name.</p><p>For a full list of packages and their building status, see <a href="https://www.yiiframework.com/status/3.0" target="_blank" rel="noreferrer">status page at yiiframework.com</a>.</p><h2 id="yii-specific-packages-framework-and-extensions" tabindex="-1">Yii-specific packages (framework and extensions) <a class="header-anchor" href="#yii-specific-packages-framework-and-extensions" aria-label="Permalink to &quot;Yii-specific packages (framework and extensions)&quot;">​</a></h2><ul><li>named <code>yiisoft/yii-something</code> or more specific: <code>yii-type-something</code> e.g.: <ul><li>modules: <code>yii-module-users</code>, <code>yii-module-pages</code></li><li>themes: <code>yii-theme-adminlte</code>, <code>yii-theme-hyde</code></li><li>widgets: <code>yii-widget-datepicker</code></li><li>...</li></ul></li><li>titled as &quot;Yii Framework ...&quot;</li><li>may have any dependencies and Yii-specific code</li></ul><h2 id="general-purpose-packages-libraries" tabindex="-1">General purpose packages (libraries) <a class="header-anchor" href="#general-purpose-packages-libraries" aria-label="Permalink to &quot;General purpose packages (libraries)&quot;">​</a></h2><ul><li>you can use these independently of Yii Framework</li><li>named as <code>yiisoft/something</code> without yii-prefix</li><li>titled as &quot;Yii ...&quot;</li><li>must not have dependencies on any Yii-specific packages</li><li>should have as fewer dependencies as possible</li></ul><h2 id="configs-and-defaults" tabindex="-1">Configs and defaults <a class="header-anchor" href="#configs-and-defaults" aria-label="Permalink to &quot;Configs and defaults&quot;">​</a></h2><p>The following applies to both Yii-specific packages and general purpose packages:</p><ul><li>Package may have <code>config</code> directory with Yii-specific defaults.</li><li>Package may have &quot;config-plugin&quot; in &quot;extra&quot; section of <code>composer.json</code>.</li><li>Package mustn&#39;t have dependencies in <code>require</code> section of <code>composer.json</code> that are used in <code>config</code> only.</li><li>You should namespace parameters with <code>vendor/package-name</code>:</li></ul><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;vendor/package-name&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;param1&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;param2&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="versions" tabindex="-1">Versions <a class="header-anchor" href="#versions" aria-label="Permalink to &quot;Versions&quot;">​</a></h2><p>All packages follow <a href="https://semver.org/" target="_blank" rel="noreferrer">SemVer</a> versioning:</p><ul><li><code>x.*.*</code> - incompatible API changes.</li><li><code>*.x.*</code> - add functionality (backwards-compatible).</li><li><code>*.*.x</code> - bug fixes (backwards-compatible).</li></ul><p>The first stable version should be 1.0.0.</p><p>Each package version number doesn&#39;t depend on any other package version or framework name/version, only on its own public contract. The framework as a whole has the &quot;Yii3&quot; name.</p><p>It&#39;s alright to use packages with different major versions together, as long as they&#39;re compatible.</p><h2 id="php-versions-support" tabindex="-1">PHP versions support <a class="header-anchor" href="#php-versions-support" aria-label="Permalink to &quot;PHP versions support&quot;">​</a></h2><p>The support of PHP versions supported for a package depends on <a href="https://www.php.net/supported-versions.php" target="_blank" rel="noreferrer">PHP versions life cycle</a>.</p><ul><li>Package versions with active support MUST support all PHP versions that have active support.</li><li>Both packages and application templates MUST have supported versions that receive bug and security fixes. These SHOULD correspond to PHP versions receiving security fixes.</li><li>Packages and application templates MIGHT have supported versions that work with unsupported PHP versions.</li><li>Bumping the minimal PHP version in a package or an application template is a minor change.</li></ul><h2 id="composer-json" tabindex="-1">composer.json <a class="header-anchor" href="#composer-json" aria-label="Permalink to &quot;composer.json&quot;">​</a></h2><p>A logical OR operator in version ranges MUST use double pipe (<code>||</code>). For example: <code>&quot;yiisoft/arrays&quot;: &quot;^1.0 || ^2.0&quot;</code>.</p>`,23),t=[n];function r(l,p,c,d,h,u){return s(),a("div",null,t)}const m=e(o,[["render",r]]);export{g as __pageData,m as default};
