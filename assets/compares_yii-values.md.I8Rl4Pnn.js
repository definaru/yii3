import{_ as e,c as a,o as i,V as l}from"./chunks/framework.szqEfhRr.js";const f=JSON.parse('{"title":"Yii goal and values","description":"","frontmatter":{},"headers":[],"relativePath":"compares/yii-values.md","filePath":"compares/yii-values.md","lastUpdated":null}'),t={name:"compares/yii-values.md"},s=l('<h1 id="yii-goal-and-values" tabindex="-1">Yii goal and values <a class="header-anchor" href="#yii-goal-and-values" aria-label="Permalink to &quot;Yii goal and values&quot;">​</a></h1><h2 id="goal" tabindex="-1">Goal <a class="header-anchor" href="#goal" aria-label="Permalink to &quot;Goal&quot;">​</a></h2><p>The Yii project aims to build and support <em>practical</em> and <em>helpful</em> tools and community.</p><h2 id="values" tabindex="-1">Values <a class="header-anchor" href="#values" aria-label="Permalink to &quot;Values&quot;">​</a></h2><p>The values we express in our work support the goal. We try to</p><ul><li>Be practical <ul><li><a href="#high-performance">High performance</a></li><li><a href="#sensible-defaults-and-flexibility">Sensible defaults and flexibility</a></li><li><a href="#be-practice-oriented">Be practice-oriented</a></li></ul></li><li>Be helpful <ul><li><a href="#be-simple">Be simple</a></li><li><a href="#be-explicit">Be explicit</a></li><li><a href="#be-consistent">Be consistent</a></li></ul></li></ul><h2 id="be-practical" tabindex="-1">Be practical <a class="header-anchor" href="#be-practical" aria-label="Permalink to &quot;Be practical&quot;">​</a></h2><h3 id="high-performance" tabindex="-1">High performance <a class="header-anchor" href="#high-performance" aria-label="Permalink to &quot;High performance&quot;">​</a></h3><p>Performance is a necessary condition of practicality. Software shouldn&#39;t waste machine resources or human resources.</p><h3 id="sensible-defaults-and-flexibility" tabindex="-1">Sensible defaults and flexibility <a class="header-anchor" href="#sensible-defaults-and-flexibility" aria-label="Permalink to &quot;Sensible defaults and flexibility&quot;">​</a></h3><p>We prefer sensible defaults and conventions that users can customize. We seek a balance between flexibility, discipline and simplicity that meets common needs.</p><h3 id="be-practice-oriented" tabindex="-1">Be practice-oriented <a class="header-anchor" href="#be-practice-oriented" aria-label="Permalink to &quot;Be practice-oriented&quot;">​</a></h3><p>We prefer practice to theory. For example:</p><ul><li>Solutions for known use cases should avoid excess complexity by providing only needed flexibility.</li><li>Standard implementations should take practical use into account.</li><li>Experience is at least as useful as theory in guiding design.</li><li>Context is critical in determining appropriateness.</li></ul><h2 id="be-helpful" tabindex="-1">Be helpful <a class="header-anchor" href="#be-helpful" aria-label="Permalink to &quot;Be helpful&quot;">​</a></h2><p>This value guides technical decisions as well as community activity. Consideration of how software features help users should guide development. Community-wise, we value any helpful contribution, be it a pull request or an answer in the forum.</p><p>When the other principles could conflict, we choose a solution that&#39;s more helpful to the community.</p><h3 id="be-simple" tabindex="-1">Be simple <a class="header-anchor" href="#be-simple" aria-label="Permalink to &quot;Be simple&quot;">​</a></h3><p>Solutions should be simple and expressive:</p><ul><li>We use as much complexity as needed and no more.</li><li>We avoid ugly solutions unless there is no alternative.</li><li>Fewer rules are better than more rules.</li></ul><h3 id="be-explicit" tabindex="-1">Be Explicit <a class="header-anchor" href="#be-explicit" aria-label="Permalink to &quot;Be Explicit&quot;">​</a></h3><p>We prefer explicit, obvious solutions and code. Solutions should clearly express exactly what they do. For example:</p><ul><li>A straightforward solution is better than an abstract one unless the abstraction has practical purpose.</li><li>Loud fails are better than silent fails or masking errors.</li><li>Explicit casts are better than PHP type juggling, type hints are good.</li><li>No magic unless necessary.</li></ul><h3 id="be-consistent" tabindex="-1">Be consistent <a class="header-anchor" href="#be-consistent" aria-label="Permalink to &quot;Be consistent&quot;">​</a></h3><p>We try to be consistent in:</p><ul><li>Code style</li><li>Naming</li><li>Design</li><li>Structure</li><li>Values and goals</li></ul>',26),o=[s];function r(n,c,u,h,d,p){return i(),a("div",null,o)}const b=e(t,[["render",r]]);export{f as __pageData,b as default};
