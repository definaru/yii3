import{_ as a,c as e,o as t,V as r}from"./chunks/framework.szqEfhRr.js";const f=JSON.parse('{"title":"Working with Databases","description":"","frontmatter":{},"headers":[],"relativePath":"start/databases.md","filePath":"start/databases.md","lastUpdated":null}'),i={name:"start/databases.md"},s=r('<h1 id="working-with-databases" tabindex="-1">Working with Databases <a class="header-anchor" href="#working-with-databases" aria-label="Permalink to &quot;Working with Databases&quot;">â€‹</a></h1><p>Yii doesn&#39;t dictate using a particular database or storage for your application. There are many ways you can work with relational databases:</p><ul><li><a href="/yiisoft/db.html">Yii Database</a></li><li><a href="https://www.doctrine-project.org/" target="_blank" rel="noreferrer">Doctrine</a> via <a href="https://github.com/fcnybok/yii-doctrine" target="_blank" rel="noreferrer">Yii Doctrine package</a></li><li><a href="https://github.com/cycle" target="_blank" rel="noreferrer">Cycle</a> via <a href="https://github.com/yiisoft/yii-cycle" target="_blank" rel="noreferrer">Yii Cycle package</a></li><li><a href="https://www.php.net/manual/en/book.pdo.php" target="_blank" rel="noreferrer">PDO</a></li></ul><p>For non-relational ones, there are usually official libraries available:</p><ul><li><a href="https://github.com/elastic/elasticsearch-php" target="_blank" rel="noreferrer">ElasticSearch</a></li><li><a href="https://redis.io/docs/clients/#php" target="_blank" rel="noreferrer">Redis</a></li><li>...</li></ul>',5),l=[s];function o(n,c,h,p,d,_){return t(),e("div",null,l)}const u=a(i,[["render",o]]);export{f as __pageData,u as default};
