import{_ as e,c as s,o as n,V as a}from"./chunks/framework.szqEfhRr.js";const b=JSON.parse('{"title":"Overview","description":"","frontmatter":{},"headers":[],"relativePath":"structure/overview.md","filePath":"structure/overview.md","lastUpdated":null}'),t={name:"structure/overview.md"},l=a(`<h1 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">â€‹</a></h1><p>Yii applications code is typically grouped into modules by context. In each module there could be grouping by type.</p><p>For example, if the application is an online store, context could be:</p><ul><li><strong>Customer</strong><ul><li><em>Profile</em></li><li><em>Products list</em></li><li><em>Checkout</em></li></ul></li><li><strong>Logistics</strong></li><li><strong>Delivery</strong><ul><li><em>Addresses</em></li></ul></li><li><strong>Helpdesk</strong><ul><li><em>Support</em></li><li><em>Claims</em></li><li><em>Returns</em></li></ul></li><li><strong>Accounting</strong><ul><li><em>Returns</em></li><li><em>Transactions</em></li><li><em>Taxes</em></li></ul></li></ul><p>For a &quot;Customer&quot; context, residing under <code>App\\Customer</code> namespace, structure would be:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>App/</span></span>
<span class="line"><span>  Customer/                          &lt;-- module namespace</span></span>
<span class="line"><span>    Entity/</span></span>
<span class="line"><span>      Customer.php                   &lt;-- entity shared by &quot;Profile&quot; and &quot;Checkout&quot;</span></span>
<span class="line"><span>    Profile/</span></span>
<span class="line"><span>      Widget/</span></span>
<span class="line"><span>        Gravatar.php</span></span>
<span class="line"><span>      ProfileRepository.php          &lt;-- repository is usually specific to context</span></span>
<span class="line"><span>      ProfileController.php          &lt;-- &quot;Customer\\Profile&quot; entry point</span></span>
<span class="line"><span>    ProductList/                     &lt;-- module namespace </span></span>
<span class="line"><span>      Entity/                        &lt;-- entities specific to &quot;Customer\\ProductList&quot;</span></span>
<span class="line"><span>        Category.php</span></span>
<span class="line"><span>        Product.php</span></span>
<span class="line"><span>      ProductsListController.php     &lt;-- &quot;Customer\\ProductList&quot; entry point</span></span>
<span class="line"><span>    Checkout/                        &lt;-- module namespace</span></span>
<span class="line"><span>      CheckoutController.php</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>A context may include sub-contexts. If a class is shared by multiple contexts, it&#39;s moved to the ancestor of both contexts.</p><p>A context may have <a href="./action.html">an entry point known as &quot;action&quot; or &quot;controller&quot;</a>. Its job is to take <a href="./../runtime/request.html">a request instance</a>, pass it to <a href="./domain.html">domain layer</a> in a suitable format, and create <a href="./../runtime/response.html">a response</a> based on what&#39;s returned by domain layer.</p><p>Besides, Yii applications also have the following:</p><ul><li><a href="./entry-script.html">entry scripts</a>: they&#39;re PHP scripts that are directly accessible by end users. They&#39;re responsible for starting a request handling cycle. Typically, a single entry script is handling whole application.</li><li><a href="./service.html">services</a>: they&#39;re typically stateless objects registered within dependency container and provide various action methods.</li><li><a href="./middleware.html">middleware</a>: they represent a code that needs to be invoked before and after the actual handling of each request by action handlers.</li></ul>`,10),i=[l];function r(p,o,c,u,m,d){return n(),s("div",null,i)}const y=e(t,[["render",r]]);export{b as __pageData,y as default};
