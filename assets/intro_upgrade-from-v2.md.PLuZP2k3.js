import{_ as e,c as a,o as n,V as i}from"./chunks/framework.szqEfhRr.js";const m=JSON.parse('{"title":"Upgrading from Version 2.0","description":"","frontmatter":{},"headers":[],"relativePath":"intro/upgrade-from-v2.md","filePath":"intro/upgrade-from-v2.md","lastUpdated":null}'),s={name:"intro/upgrade-from-v2.md"},r=i(`<h1 id="upgrading-from-version-2-0" tabindex="-1">Upgrading from Version 2.0 <a class="header-anchor" href="#upgrading-from-version-2-0" aria-label="Permalink to &quot;Upgrading from Version 2.0&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">Informanion</p><p>If you haven&#39;t used Yii2, you can skip this section and get directly to &quot;<a href="/guide/getting-started.html">getting started</a>&quot; section.</p></div><p>While sharing some common ideas and values, Yii 3 is conceptually different from Yii 2. There is no easy upgrade path, so first <a href="https://www.yiiframework.com/release-cycle" target="_blank" rel="noreferrer">check maintenance policy and end of life dates for Yii 2</a> and consider starting new projects on Yii 3 while keeping existing ones on Yii 2.</p><h2 id="php-requirements" tabindex="-1">PHP requirements <a class="header-anchor" href="#php-requirements" aria-label="Permalink to &quot;PHP requirements&quot;">​</a></h2><p>Yii3 requires PHP 8.0 or above. As a result, there are language features used that weren&#39;t used in Yii 2:</p><ul><li><a href="https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration" target="_blank" rel="noreferrer">Type declarations</a></li><li><a href="https://www.php.net/manual/en/functions.returning-values.php#functions.returning-values.type-declaration" target="_blank" rel="noreferrer">Return type declarations</a></li><li><a href="https://www.php.net/manual/en/language.oop5.constants.php" target="_blank" rel="noreferrer">Class constant visibility</a></li><li><a href="https://www.php.net/manual/en/language.oop5.anonymous.php" target="_blank" rel="noreferrer">Anonymous classes</a></li><li><a href="https://www.php.net/manual/en/language.oop5.basic.php#language.oop5.basic.class.class" target="_blank" rel="noreferrer">::class</a></li><li><a href="https://www.php.net/manual/en/language.generators.php" target="_blank" rel="noreferrer">Generators</a></li><li><a href="https://www.php.net/manual/en/functions.arguments.php#functions.variable-arg-list" target="_blank" rel="noreferrer">Variadic functions</a></li></ul><h2 id="preliminary-refactoring" tabindex="-1">Preliminary refactoring <a class="header-anchor" href="#preliminary-refactoring" aria-label="Permalink to &quot;Preliminary refactoring&quot;">​</a></h2><p>It&#39;s a good idea to refactor your Yii 2 project before porting it to Yii 3. That would both make porting easier and benefit the project in question while it&#39;s not moved to Yii 3 yet.</p><h3 id="use-di-instead-of-service-locator" tabindex="-1">Use DI instead of service locator <a class="header-anchor" href="#use-di-instead-of-service-locator" aria-label="Permalink to &quot;Use DI instead of service locator&quot;">​</a></h3><p>Since Yii 3 is forcing you to inject dependencies, it&#39;s a good idea to prepare and switch from using service locator (<code>Yii::$app-&gt;</code>) to <a href="https://www.yiiframework.com/doc/guide/2.0/en/concept-di-container" target="_blank" rel="noreferrer">DI container</a>.</p><p>If usage of DI container is problematic for whatever reason, consider moving all calls to <code>Yii::$app-&gt;</code> to controller actions and widgets and passing dependencies manually from a controller to what needs them.</p><p>See <a href="./../concept/di-container.html">Dependency injection and container</a> for an explanation of the idea.</p><h3 id="introduce-repositories-for-getting-data" tabindex="-1">Introduce repositories for getting data <a class="header-anchor" href="#introduce-repositories-for-getting-data" aria-label="Permalink to &quot;Introduce repositories for getting data&quot;">​</a></h3><p>Since Active Record isn&#39;t the only way to work with a database in Yii 3, consider introducing repositories that would hide details of getting data and gather them in a single place you can later re-do:</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PostRepository</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getArchive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getTop10ForFrontPage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="separate-domain-layer-from-infrastructure" tabindex="-1">Separate domain layer from infrastructure <a class="header-anchor" href="#separate-domain-layer-from-infrastructure" aria-label="Permalink to &quot;Separate domain layer from infrastructure&quot;">​</a></h3><p>In case you have a rich complicated domain, it&#39;s a good idea to separate it from infrastructure provided by framework that&#39;s all the business logic has to go to framework-independent classes.</p><h3 id="move-more-into-components" tabindex="-1">Move more into components <a class="header-anchor" href="#move-more-into-components" aria-label="Permalink to &quot;Move more into components&quot;">​</a></h3><p>Yii 3 services are conceptually similar to Yii 2 components, so it&#39;s a good idea to move reusable parts of your application into components.</p>`,19),t=[r];function o(l,p,c,h,d,u){return n(),a("div",null,t)}const f=e(s,[["render",o]]);export{m as __pageData,f as default};
