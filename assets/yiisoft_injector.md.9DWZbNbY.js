import{_ as a,c as e,o as s,V as i}from"./chunks/framework.szqEfhRr.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"yiisoft/injector.md","filePath":"yiisoft/injector.md","lastUpdated":null}'),t={name:"yiisoft/injector.md"},n=i(`<p align="center"><a href="https://github.com/yiisoft" target="_blank"><img src="https://yiisoft.github.io/docs/images/yii_logo.svg" width="100px"></a><h1 align="center">Yii Injector</h1><br></p><div class="tags"><p><a href="https://packagist.org/packages/yiisoft/injector" target="_blank" rel="noreferrer"><img src="https://poser.pugx.org/yiisoft/injector/v/stable.png" alt="Latest Stable Version"></a><a href="https://packagist.org/packages/yiisoft/injector" target="_blank" rel="noreferrer"><img src="https://poser.pugx.org/yiisoft/injector/downloads.png" alt="Total Downloads"></a><a href="https://github.com/yiisoft/injector/actions" target="_blank" rel="noreferrer"><img src="https://github.com/yiisoft/injector/workflows/build/badge.svg" alt="Build status"></a><a href="https://scrutinizer-ci.com/g/yiisoft/injector/" target="_blank" rel="noreferrer"><img src="https://scrutinizer-ci.com/g/yiisoft/injector/badges/coverage.png" alt="Code Coverage"></a><a href="https://scrutinizer-ci.com/g/yiisoft/injector/?branch=master" target="_blank" rel="noreferrer"><img src="https://scrutinizer-ci.com/g/yiisoft/injector/badges/quality-score.png?b=master" alt="Scrutinizer Code Quality"></a><a href="https://dashboard.stryker-mutator.io/reports/github.com/yiisoft/injector/master" target="_blank" rel="noreferrer"><img src="https://img.shields.io/endpoint?style=flat&amp;url=https%3A%2F%2Fbadge-api.stryker-mutator.io%2Fgithub.com%2Fyiisoft%2Finjector%2Fmaster" alt="Mutation testing badge"></a><a href="https://github.com/yiisoft/injector/actions?query=workflow%3A%22static+analysis%22" target="_blank" rel="noreferrer"><img src="https://github.com/yiisoft/injector/workflows/static%20analysis/badge.svg" alt="static analysis"></a><a href="https://shepherd.dev/github/yiisoft/injector" target="_blank" rel="noreferrer"><img src="https://shepherd.dev/github/yiisoft/injector/coverage.svg" alt="type-coverage"></a></p></div><p>A <a href="https://en.wikipedia.org/wiki/Dependency_injection" target="_blank" rel="noreferrer">dependency injection</a> implementation based on autowiring and <a href="https://www.php-fig.org/psr/psr-11/" target="_blank" rel="noreferrer">PSR-11</a> compatible dependency injection containers.</p><h4 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h4><ul><li>Injects dependencies when calling functions and creating objects</li><li>Works with any dependency injection container (DIC) that is <a href="https://www.php-fig.org/psr/psr-11/" target="_blank" rel="noreferrer">PSR-11</a> compatible</li><li>Accepts additional dependencies and arguments passed as array</li><li>Allows passing arguments <em>by parameter name</em> in the array</li><li>Resolves object type dependencies from the container and the passed array by <a href="https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration" target="_blank" rel="noreferrer">parameter type declaration</a></li><li>Resolves <a href="https://www.php.net/manual/en/functions.arguments.php#functions.variable-arg-list" target="_blank" rel="noreferrer">variadic arguments</a> i.e. <code>function (MyClass ...$a)</code></li></ul><h2 id="requirements" tabindex="-1">Requirements <a class="header-anchor" href="#requirements" aria-label="Permalink to &quot;Requirements&quot;">​</a></h2><ul><li>PHP 7.4 or higher.</li></ul><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><p>The package could be installed with composer:</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> require yiisoft/injector</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="about" tabindex="-1">About <a class="header-anchor" href="#about" aria-label="Permalink to &quot;About&quot;">​</a></h2><p>Injector can automatically resolve and inject dependencies when calling functions and creating objects.</p><p>It therefore uses <a href="https://www.php.net/manual/en/book.reflection.php" target="_blank" rel="noreferrer">Reflection</a> to analyze the parameters of the function to call, or the constructor of the class to instantiate and then tries to resolve all arguments by several strategies.</p><p>The main purpose is to find dependency objects - that is arguments of type object that are declared with a classname or an interface - in a (mandatory) <a href="https://www.php-fig.org/psr/psr-11/" target="_blank" rel="noreferrer">PSR-11</a> compatible <em>dependency injection container</em> (DIC). The container must therefore use the class or interface name as ID.</p><p>In addition, an array with arguments can be passed that will also be scanned for matching dependencies. To make things really flexible (and not limited to objects), arguments in that array can optionally use a function parameter name as key. This way basically any callable can be invoked and any object be instantiated by the Injector even if it uses a mix of object dependencies and arguments of other types.</p><h2 id="basic-example" tabindex="-1">Basic Example <a class="header-anchor" href="#basic-example" aria-label="Permalink to &quot;Basic Example&quot;">​</a></h2><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Yiisoft\\Injector\\Injector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// A function to call</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$fn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\App\\Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $a, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\App\\Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $b, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $c) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Arbitrary PSR-11 compatible object container</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$container </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\some\\di\\Container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;App\\Foo&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// will be used as $a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Prepare the injector</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$injector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Injector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($container);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Use the injector to call the function and resolve dependencies</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $injector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($fn, [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;c&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// will be used as $c</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// will be used as $b</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="caching-reflection-objects" tabindex="-1">Caching reflection objects <a class="header-anchor" href="#caching-reflection-objects" aria-label="Permalink to &quot;Caching reflection objects&quot;">​</a></h3><p>Enable caching of reflection objects to improve performance by calling <code>withCacheReflections(true)</code>:</p><div class="language-php vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Yiisoft\\Injector\\Injector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$injector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Injector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($container))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withCacheReflections</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>By default, caching is disabled.</p><h2 id="documentation" tabindex="-1">Documentation <a class="header-anchor" href="#documentation" aria-label="Permalink to &quot;Documentation&quot;">​</a></h2><ul><li><a href="https://github.com/yiisoft/injector/blob/master/docs/en/README.md" target="_blank" rel="noreferrer">English</a></li><li><a href="https://github.com/yiisoft/injector/blob/master/docs/ru/README.md" target="_blank" rel="noreferrer">Russian</a></li></ul><h2 id="testing" tabindex="-1">Testing <a class="header-anchor" href="#testing" aria-label="Permalink to &quot;Testing&quot;">​</a></h2><h3 id="unit-testing" tabindex="-1">Unit testing <a class="header-anchor" href="#unit-testing" aria-label="Permalink to &quot;Unit testing&quot;">​</a></h3><p>The package is tested with <a href="https://phpunit.de/" target="_blank" rel="noreferrer">PHPUnit</a>. To run tests:</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./vendor/bin/phpunit</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="mutation-testing" tabindex="-1">Mutation testing <a class="header-anchor" href="#mutation-testing" aria-label="Permalink to &quot;Mutation testing&quot;">​</a></h3><p>The package tests are checked with <a href="https://infection.github.io/" target="_blank" rel="noreferrer">Infection</a> mutation framework with <a href="https://github.com/Roave/infection-static-analysis-plugin" target="_blank" rel="noreferrer">Infection Static Analysis Plugin</a>. To run it:</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./vendor/bin/roave-infection-static-analysis-plugin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="static-analysis" tabindex="-1">Static analysis <a class="header-anchor" href="#static-analysis" aria-label="Permalink to &quot;Static analysis&quot;">​</a></h3><p>The code is statically analyzed with <a href="https://psalm.dev/" target="_blank" rel="noreferrer">Psalm</a>. To run static analysis:</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./vendor/bin/psalm</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="license" tabindex="-1">License <a class="header-anchor" href="#license" aria-label="Permalink to &quot;License&quot;">​</a></h2><p>The Yii Injector is free software. It is released under the terms of the BSD License. Please see <a href="/LICENSE.html"><code>LICENSE</code></a> for more information.</p><p>Maintained by <a href="https://www.yiiframework.com/" target="_blank" rel="noreferrer">Yii Software</a>.</p><h2 id="support-the-project" tabindex="-1">Support the project <a class="header-anchor" href="#support-the-project" aria-label="Permalink to &quot;Support the project&quot;">​</a></h2><p><a href="https://opencollective.com/yiisoft" target="_blank" rel="noreferrer"><img src="https://img.shields.io/badge/Open%20Collective-sponsor-7eadf1?logo=open%20collective&amp;logoColor=7eadf1&amp;labelColor=555555" alt="Open Collective"></a></p><h2 id="follow-updates" tabindex="-1">Follow updates <a class="header-anchor" href="#follow-updates" aria-label="Permalink to &quot;Follow updates&quot;">​</a></h2><div class="tags"><p><a href="https://www.yiiframework.com/" target="_blank" rel="noreferrer"><img src="https://img.shields.io/badge/Powered_by-Yii_Framework-green.svg?style=flat" alt="Official website"></a><a href="https://twitter.com/yiiframework" target="_blank" rel="noreferrer"><img src="https://img.shields.io/badge/twitter-follow-1DA1F2?logo=twitter&amp;logoColor=1DA1F2&amp;labelColor=555555?style=flat" alt="Twitter"></a><a href="https://t.me/yii3en" target="_blank" rel="noreferrer"><img src="https://img.shields.io/badge/telegram-join-1DA1F2?style=flat&amp;logo=telegram" alt="Telegram"></a><a href="https://www.facebook.com/groups/yiitalk" target="_blank" rel="noreferrer"><img src="https://img.shields.io/badge/facebook-join-1DA1F2?style=flat&amp;logo=facebook&amp;logoColor=ffffff" alt="Facebook"></a><a href="https://yiiframework.com/go/slack" target="_blank" rel="noreferrer"><img src="https://img.shields.io/badge/slack-join-1DA1F2?style=flat&amp;logo=slack" alt="Slack"></a></p></div>`,40),r=[n];function l(p,o,h,c,d,k){return s(),e("div",null,r)}const u=a(t,[["render",l]]);export{b as __pageData,u as default};
