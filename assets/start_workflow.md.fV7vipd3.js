import{_ as s,c as n,o as a,V as e}from"./chunks/framework.szqEfhRr.js";const p="/assets/request-lifecycle.YNDwxkZF.svg",f=JSON.parse('{"title":"Running applications","description":"","frontmatter":{},"headers":[],"relativePath":"start/workflow.md","filePath":"start/workflow.md","lastUpdated":null}'),i={name:"start/workflow.md"},t=e(`<h1 id="running-applications" tabindex="-1">Running applications <a class="header-anchor" href="#running-applications" aria-label="Permalink to &quot;Running applications&quot;">​</a></h1><p>After installing Yii, you have a working Yii application that can be launched via <code>./yii serve</code> and then accessed via the URL <code>http://localhost:8080/</code>. This section will introduce the application&#39;s built-in functionality, how the code is organized, and how the application handles requests in general.</p><div class="tip custom-block"><p class="custom-block-title">Info:</p><p>For simplicity, throughout this &quot;Getting Started&quot; tutorial use &quot;serve&quot; command. It shouldn&#39;t be used to serve the project in production. When setting up a real server, use <code>app/public</code> as the document root.</p></div><p>Note that unlike the framework itself, after you install a project template, it&#39;s all yours. You&#39;re free to add or delete code and overall change it as you need.</p><h2 id="functionality" tabindex="-1">Functionality <span id="functionality"></span> <a class="header-anchor" href="#functionality" aria-label="Permalink to &quot;Functionality &lt;span id=&quot;functionality&quot;&gt;&lt;/span&gt;&quot;">​</a></h2><p>The application installed has only the homepage, displayed when you access the URL <code>http://localhost:8080/</code>. It shares a common layout that could be reused on further pages.</p><p>Additionally, to the web application, there is a console script accessible via <code>./yii</code>. This script can be used to run background and maintenance tasks for the application, which are described in the <a href="./../tutorial/console-applications.html">Console Application Section</a>.</p><h2 id="application-structure" tabindex="-1">Application Structure <span id="application-structure"></span> <a class="header-anchor" href="#application-structure" aria-label="Permalink to &quot;Application Structure &lt;span id=&quot;application-structure&quot;&gt;&lt;/span&gt;&quot;">​</a></h2><p>The most important directories and files in your application are (assuming the application&#39;s root directory is <code>app</code>):</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>config/                   Configuration files.</span></span>
<span class="line"><span>    common/               Configs applied to both console and web.</span></span>
<span class="line"><span>        di/               DI container configuration.</span></span>
<span class="line"><span>        aliasess.php      Aliases.</span></span>
<span class="line"><span>        params.php        Various parameters used in DI configs.</span></span>
<span class="line"><span>        routes.php        Application routes.</span></span>
<span class="line"><span>    console/              Configs applied to console.</span></span>
<span class="line"><span>        commands.php      Registered console commands.</span></span>
<span class="line"><span>        params.php        Various parameters used in DI configs.</span></span>
<span class="line"><span>    web/                  Configs applied to web.</span></span>
<span class="line"><span>       di/                DI container configuration.</span></span>
<span class="line"><span>       params.php         Various parameters used in DI configs.</span></span>
<span class="line"><span>    environments/         Environment-based configs.</span></span>
<span class="line"><span>        dev/              Configs applied in dev environment.</span></span>
<span class="line"><span>            params.php    Various parameters used in DI configs.</span></span>
<span class="line"><span>        prod/             Configs applied in prod environment.</span></span>
<span class="line"><span>            params.php    Various parameters used in DI configs.</span></span>
<span class="line"><span>        test/             Configs applied in test environment.</span></span>
<span class="line"><span>            params.php    Various parameters used in DI configs.</span></span>
<span class="line"><span>    events.php            Event handlers for both console and web.</span></span>
<span class="line"><span>    events-console.php    Event handlers for console.</span></span>
<span class="line"><span>    events-web.php        Event handlers for web.</span></span>
<span class="line"><span>    params.php            Parameters that are passed to configs.</span></span>
<span class="line"><span>    providers.php         Service providers for both console and web.</span></span>
<span class="line"><span>    providers-console.php Service providers for console.</span></span>
<span class="line"><span>    providers-web.php     Service providers for web.</span></span>
<span class="line"><span>    routes.php            Defines how URLs are mapped to their handlers.</span></span>
<span class="line"><span>docs/                     Documentation.</span></span>
<span class="line"><span>public/                   Files publically accessible from the Internet.</span></span>
<span class="line"><span>    assets/               Published assets.</span></span>
<span class="line"><span>    index.php             Entry script.</span></span>
<span class="line"><span>resources/                Application resources.</span></span>
<span class="line"><span>    assets/               Asset bundle resources.</span></span>
<span class="line"><span>    message/              Message translations.</span></span>
<span class="line"><span>    views/                View templates.</span></span>
<span class="line"><span>      layout/             View layouts.</span></span>
<span class="line"><span>runtime/                  Files generated during runtime.</span></span>
<span class="line"><span>src/                      Application source code.</span></span>
<span class="line"><span>    Asset/                Asset bundle definitions.</span></span>
<span class="line"><span>    Command/              Console commands.</span></span>
<span class="line"><span>    Controller/           Web controller classes.</span></span>
<span class="line"><span>    Handler/              Custom handler for 404.</span></span>
<span class="line"><span>    ViewInjection/        Injections that bring additional variables into view templates.</span></span>
<span class="line"><span>    Installer.php         Additional actions done on Composer commands.</span></span>
<span class="line"><span>tests/                    A set of Codeception tests for the application.</span></span>
<span class="line"><span>vendor/                   Installed Composer packages.</span></span>
<span class="line"><span>configuration.php         Defines how to read application configs.</span></span>
<span class="line"><span>yii                       Console application entry point.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br></div></div><p>In general, the files in the application can be divided into two types: those under <code>app/public</code> and those under other directories. The former can be directly accessed via HTTP (i.e., in a browser), while the latter can&#39;t and shouldn&#39;t be.</p><p>Each application has an entry script <code>public/index.php</code> which is the only Web accessible PHP script in the application. The entry script is using an <a href="https://github.com/yiisoft/yii-runner" target="_blank" rel="noreferrer">application runner</a> to create an instance of an incoming request with the help of one of PSR-7 packages and passes it to <a href="./../structure/application.html">an application</a> instance. An application contains a set of middleware that are executed sequentially processing the request. The result is passed further to emitter that takes care of sending a response to the browser.</p><p>Depending on the middleware used, the application may behave differently. By default, there is a router that, based on URL requested and configuration, chooses a handler that&#39;s executed to produce a response.</p><p>You can learn more about the application template from the <a href="https://github.com/yiisoft/app/blob/master/README.md" target="_blank" rel="noreferrer">yiisoft/app package documentation</a>.</p><h2 id="request-lifecycle" tabindex="-1">Request Lifecycle <span id="request-lifecycle"></span> <a class="header-anchor" href="#request-lifecycle" aria-label="Permalink to &quot;Request Lifecycle &lt;span id=&quot;request-lifecycle&quot;&gt;&lt;/span&gt;&quot;">​</a></h2><p>The following diagram shows how an application handles a request.</p><div class="response"><p><img src="`+p+'" alt="Request Lifecycle"></p></div><ol><li>A user makes a request to the <a href="./../structure/entry-script.html">entry script</a> <code>public/index.php</code>.</li><li>The entry script with the help of application runner loads the container <a href="./../concept/configuration.html">configuration</a> and creates an <a href="./../structure/application.html">application</a> instance and services necessary to handle the request.</li><li>Request factory creates a request object based on raw request that came from a user.</li><li>Application passes a request object through a middleware array configured. One of these is typically a router.</li><li>The Router finds out what handler to execute based on request and configuration.</li><li>The handler may load some data, possibly from a database.</li><li>The handler forms a response by using data. Either directly or with the help of the view package.</li><li>Emitter receives the response and takes care of sending the response to the user&#39;s browser.</li></ol>',18),l=[t];function r(o,c,u,d,h,b){return a(),n("div",null,l)}const g=s(i,[["render",r]]);export{f as __pageData,g as default};
